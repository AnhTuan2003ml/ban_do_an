import os
import shutil
import time
import json
from datetime import datetime
import threading
import sys
import requests

# L·∫•y port t·ª´ tham s·ªë d√≤ng l·ªánh
PORT = sys.argv[1] if len(sys.argv) > 1 else "5000"
IS_MASTER = PORT == "5000"

# Th∆∞ m·ª•c l∆∞u tr·ªØ backup
BACKUP_DIR = f"backups/master" if IS_MASTER else f"backups/slave_{PORT}"
# Danh s√°ch c√°c file c·∫ßn backup
DATA_FILES = ["foods", "orders", "users"]
INTERVAL = 60  # Th·ªùi gian gi·ªØa c√°c l·∫ßn backup (t√≠nh b·∫±ng gi√¢y)
MAX_BACKUPS = 5  # S·ªë l∆∞·ª£ng backup t·ªëi ƒëa gi·ªØ l·∫°i
MASTER_URL = "http://127.0.0.1:5000"

# ƒê·∫£m b·∫£o th∆∞ m·ª•c backup t·ªìn t·∫°i
if not os.path.exists(BACKUP_DIR):
    os.makedirs(BACKUP_DIR)

def clean_old_backups():
    """X√≥a c√°c backup c≈©, ch·ªâ gi·ªØ l·∫°i MAX_BACKUPS b·∫£n m·ªõi nh·∫•t"""
    if not os.path.exists(BACKUP_DIR):
        return
        
    # L·∫•y danh s√°ch c√°c th∆∞ m·ª•c backup
    backup_dirs = [d for d in os.listdir(BACKUP_DIR) 
                  if os.path.isdir(os.path.join(BACKUP_DIR, d))]
    
    # S·∫Øp x·∫øp theo th·ªùi gian t·∫°o (m·ªõi nh·∫•t l√™n ƒë·∫ßu)
    backup_dirs.sort(reverse=True)
    
    # X√≥a c√°c backup c≈©
    for old_dir in backup_dirs[MAX_BACKUPS:]:
        old_path = os.path.join(BACKUP_DIR, old_dir)
        try:
            shutil.rmtree(old_path)
            print(f"üóëÔ∏è ƒê√£ x√≥a backup c≈©: {old_path}")
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a backup c≈© {old_path}: {str(e)}")

def backup_data():
    """T·∫°o b·∫£n sao l∆∞u cho t·∫•t c·∫£ c√°c file d·ªØ li·ªáu"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    backup_success = False
    
    # T·∫°o th∆∞ m·ª•c backup v·ªõi timestamp
    backup_dir = os.path.join(BACKUP_DIR, timestamp)
    os.makedirs(backup_dir, exist_ok=True)
    
    # Backup t·ª´ng file d·ªØ li·ªáu
    for data_type in DATA_FILES:
        try:
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ file local c·ªßa node hi·ªán t·∫°i
            source_file = os.path.join("master" if IS_MASTER else f"slave_{PORT}", f"{data_type}.json")
            if os.path.exists(source_file):
                with open(source_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # L∆∞u v√†o file backup v·ªõi timestamp
                backup_file = os.path.join(backup_dir, f"{data_type}.json")
                with open(backup_file, 'w', encoding='utf-8') as f:
                    json.dump(data, f, indent=4, ensure_ascii=False)
                print(f"‚úÖ Node {PORT} ƒë√£ t·∫°o b·∫£n sao l∆∞u {data_type}: {backup_file}")
                backup_success = True
            else:
                print(f"‚ö†Ô∏è File {source_file} kh√¥ng t·ªìn t·∫°i")
            
        except Exception as e:
            print(f"‚ùå Node {PORT} l·ªói khi backup {data_type}: {str(e)}")
    
    if backup_success:
        # X√≥a c√°c backup c≈©
        clean_old_backups()
    else:
        print(f"‚ùå Node {PORT} kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c sao l∆∞u!")

def start_backup():
    """Ch·∫°y backup t·ª± ƒë·ªông trong lu·ªìng ri√™ng."""
    def backup_loop():
        node_type = "Master" if IS_MASTER else f"Slave {PORT}"
        print(f"üîπ {node_type} b·∫Øt ƒë·∫ßu t·ª± ƒë·ªông sao l∆∞u d·ªØ li·ªáu... üîπ")
        print(f"üìÅ Th∆∞ m·ª•c backup: {BACKUP_DIR}")
        print(f"üìÑ C√°c file ƒë∆∞·ª£c backup: {', '.join(DATA_FILES)}")
        print(f"‚è±Ô∏è T·∫ßn su·∫•t backup: m·ªói {INTERVAL} gi√¢y")
        print(f"üì¶ Gi·ªØ l·∫°i {MAX_BACKUPS} b·∫£n backup m·ªõi nh·∫•t")
        print(f"‚è≥ ƒê·ª£i 20 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu backup...")
        
        # ƒê·ª£i 20 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu backup
        for i in range(20, 0, -1):
            print(f"‚è≥ C√≤n {i} gi√¢y...", end='\r')
            time.sleep(1)
        print("\n‚úÖ B·∫Øt ƒë·∫ßu backup!")
        
        while True:
            backup_data()
            time.sleep(INTERVAL)
    
    backup_thread = threading.Thread(target=backup_loop, daemon=True)
    backup_thread.start()

if __name__ == "__main__":
    start_backup()
    # Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è Node {PORT} ƒë√£ d·ª´ng backup")
